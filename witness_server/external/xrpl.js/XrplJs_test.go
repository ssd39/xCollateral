package external

import (
	"encoding/json"
	"github.com/stretchr/testify/require"
	"peersyst/bridge-witness-go/internal/chains/xrp/xrpl/transaction"
	"testing"
)

var addAttestationTransaction = `{"Account":"rNed469VXXPKScZbpeoifQnsKL277ZtTVL","Fee":"12","Flags":0,"LastLedgerSequence":2056626,"Sequence":220554,"SigningPubKey":"02FCE93F492B3BE2CA847BB6F58C7BF73B7D98CD9D7F22F891D58DAC759D107766","TransactionType":"XChainAddAttestation","TxnSignature":"30440220442FCC4442E5AD88E85D17E47899D6ADCB918D15E4A26761CDE38E77A6FC6C58022004C9DB47A7B169AC4A2A3336189CFA2CB1AFDF9CB42E61F9F4BC48ED62BD24C4","XChainAttestationBatch":{"XChainBridge":{"IssuingChainDoor":"rHb9CJAWyB4rj91VRWn96DkukG4bwdtyTh","IssuingChainIssue":{"currency":"XRP"},"LockingChainDoor":"ryC3236aXD1KjudaBJgpYA5g9fZuHxET6","LockingChainIssue":{"currency":"XRP"}},"XChainClaimAttestationBatch":[{"XChainClaimAttestationBatchElement":{"Account":"rw2rMcpMTtfJYvJMbBMdHKVe8bSCJtRDyC","Amount":"50000000","AttestationRewardAccount":"rNed469VXXPKScZbpeoifQnsKL277ZtTVL","Destination":"rPKNjTUnYtdLjCap9aFi9npVZFFuXnFgNL","PublicKey":"02FCE93F492B3BE2CA847BB6F58C7BF73B7D98CD9D7F22F891D58DAC759D107766","Signature":"3045022100C36934EB38853D9B5CEEE0AE8F4068F6D6DE6F5F318393D34196977C86FF842202203AED6376ABA69616443CDE64AE3F164E5A2C55109CA56002DA3413D38E1D9BCD","WasLockingChainSend":0,"XChainClaimID":"d"}}],"XChainCreateAccountAttestationBatch":[]},"date":1676640830000}`
var addAttestationTransactionMulti = `{"Account":"rNed469VXXPKScZbpeoifQnsKL277ZtTVL","Fee":"12","Flags":0,"LastLedgerSequence":2056626,"Sequence":220554,"SigningPubKey":"","TransactionType":"XChainAddAttestation","TxnSignature":"30440220442FCC4442E5AD88E85D17E47899D6ADCB918D15E4A26761CDE38E77A6FC6C58022004C9DB47A7B169AC4A2A3336189CFA2CB1AFDF9CB42E61F9F4BC48ED62BD24C4","XChainAttestationBatch":{"XChainBridge":{"IssuingChainDoor":"rHb9CJAWyB4rj91VRWn96DkukG4bwdtyTh","IssuingChainIssue":{"currency":"XRP"},"LockingChainDoor":"ryC3236aXD1KjudaBJgpYA5g9fZuHxET6","LockingChainIssue":{"currency":"XRP"}},"XChainClaimAttestationBatch":[{"XChainClaimAttestationBatchElement":{"Account":"rw2rMcpMTtfJYvJMbBMdHKVe8bSCJtRDyC","Amount":"50000000","AttestationRewardAccount":"rNed469VXXPKScZbpeoifQnsKL277ZtTVL","Destination":"rPKNjTUnYtdLjCap9aFi9npVZFFuXnFgNL","PublicKey":"02FCE93F492B3BE2CA847BB6F58C7BF73B7D98CD9D7F22F891D58DAC759D107766","Signature":"3045022100C36934EB38853D9B5CEEE0AE8F4068F6D6DE6F5F318393D34196977C86FF842202203AED6376ABA69616443CDE64AE3F164E5A2C55109CA56002DA3413D38E1D9BCD","WasLockingChainSend":0,"XChainClaimID":"d"}}],"XChainCreateAccountAttestationBatch":[]},"date":1676640830000}`
var expectedEncoded
var expectedEncodedMulti
var encoded = "01191421F50F08EF241042F092B64B4F85B4017CC5EC3C000000000000000000000000000000000000000014B5F762798A53D543A014CAF8B297CFF8F2F937E80000000000000000000000000000000000000000"

func TestXrplJs_EncodeForSigning(t *testing.T) {
	xrplJs := NewXrplJs()
	tx, _ := transaction.UnmarshalTransaction(addAttestationTransaction)

	res := xrplJs.EncodeForSigning(tx)
	if false && res != expectedEncoded {
		t.Errorf("Invalid encoding %+v expected %+v\n", res, expectedEncoded)
	}
}

func TestXrplJs_EncodeForMultiSigning(t *testing.T) {
	xrplJs := NewXrplJs()
	tx, _ := transaction.UnmarshalTransaction(addAttestationTransactionMulti)
	signer := "rNed469VXXPKScZbpeoifQnsKL277ZtTVL"

	res := xrplJs.EncodeForMultiSigning(tx, signer)
	if false && res != expectedEncoded {
		t.Errorf("Invalid encoding %+v expected %+v\n", res, expectedEncodedMulti)
	}
}

func TestXrplJs_Encode(t *testing.T) {
	xrplJs := NewXrplJs()

	chainIssue := &transaction.ChainIssue{Currency: "XRP"}
	bridge := &transaction.XChainBridge{
		LockingChainDoor:  "rhaY1Jxh8wiezQrRNrDdnfpVMKZJZd4ipt",
		LockingChainIssue: *chainIssue,
		IssuingChainDoor:  "rHb9CJAWyB4rj91VRWn96DkukG4bwdtyTh",
		IssuingChainIssue: *chainIssue,
	}
	bridgeMap := map[string]transaction.XChainBridge{"XChainBridge": *bridge}
	marshalled, _ := json.Marshal(bridgeMap)

	res := xrplJs.Encode(string(marshalled))
	if res != encoded {
		t.Errorf("Invalid encoding %+v expected %+v\n", res, encoded)
	}
}

func TestXrplJs_Decode(t *testing.T) {
	xrplJs := NewXrplJs()

	chainIssue := &transaction.ChainIssue{Currency: "XRP"}
	bridge := &transaction.XChainBridge{
		IssuingChainDoor:  "rHb9CJAWyB4rj91VRWn96DkukG4bwdtyTh",
		IssuingChainIssue: *chainIssue,
		LockingChainDoor:  "rhaY1Jxh8wiezQrRNrDdnfpVMKZJZd4ipt",
		LockingChainIssue: *chainIssue,
	}
	bridgeMap := map[string]transaction.XChainBridge{"XChainBridge": *bridge}
	marshalled, _ := json.Marshal(bridgeMap)

	res := xrplJs.Decode(encoded)
	require.JSONEq(t, res, string(marshalled))
}
